import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ElevatorSimulationGUI {
    private static JTextField lift1Field, lift2Field, lift3Field, floorField;
    private static JTextArea resultArea;

    // Add your variables here

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            createAndShowGUI();
        });
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Elevator Simulation");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridLayout(4, 2));
        inputPanel.add(new JLabel("Lift 1 Queue:"));
        lift1Field = new JTextField();
        inputPanel.add(lift1Field);

        inputPanel.add(new JLabel("Lift 2 Queue:"));
        lift2Field = new JTextField();
        inputPanel.add(lift2Field);

        inputPanel.add(new JLabel("Lift 3 Queue:"));
        lift3Field = new JTextField();
        inputPanel.add(lift3Field);

        inputPanel.add(new JLabel("Enter the floor:"));
        floorField = new JTextField();
        inputPanel.add(floorField);

        JButton calculateButton = new JButton("Calculate");
        calculateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calculate();
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(calculateButton);

        resultArea = new JTextArea();
        resultArea.setEditable(false);

        frame.add(inputPanel, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);
        frame.add(new JScrollPane(resultArea), BorderLayout.EAST);

        frame.setSize(400, 300);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private static void calculate() {
        // Your existing logic here...

        // Placeholder variables for the missing parts
        int q1 = 0, q2 = 0, q3 = 0, qwt1 = 0, qwt2 = 0, qwt3 = 0;
        int ef1 = 0, ef2 = 0, ef3 = 0, fst1 = 0, fst2 = 0, fst3 = 0;
        int est1 = 0, est2 = 0, est3 = 0;

        // Display the results in the GUI
        resultArea.setText("Turn in Lift 1: " + q1 +
                "\nTurn in Lift 2: " + q2 +
                "\nTurn in Lift 3: " + q3 +
                "\nWaiting time for Lift 1: " + qwt1 +
                "\nWaiting time for Lift 2: " + qwt2 +
                "\nWaiting time for Lift 3: " + qwt3 +
                "\nExtra floors in Queue 1: " + ef1 +
                "\nExtra floors in Queue 2: " + ef2 +
                "\nExtra floors in Queue 3: " + ef3 +
                "\nTime taken by stairs by Queue 1: " + fst1 +
                "\nTime taken by stairs by Queue 2: " + fst2 +
                "\nTime taken by stairs by Queue 3: " + fst3 +
                "\nTotal time by Lift 1: " + est1 +
                "\nTotal time by Lift 2: " + est2 +
                "\nTotal time by Lift 3: " + est3 +
                "\nFastest option: " + getFastestLift());
    }

    private static String getFastestLift() {
        // Placeholder variables for the missing parts
        int est1 = 0, est2 = 0, est3 = 0;

        if (est1 < est2 && est1 < est3) {
            return "Lift 1";
        } else if (est2 < est3 && est2 < est1) {
            return "Lift 2";
        } else {
            return "Lift 3";
        }
    }
}
